<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ProjectCommon</name>
    </assembly>
    <members>
        <member name="M:ProjectCommon.DynamicMeshManagerImpl.BlockImpl.SceneObjectCachingData.GetFromCacheExact(Engine.MathEx.Vec3@,Engine.MathEx.Quat@,Engine.MathEx.Vec3@,ProjectCommon.DynamicMeshManagerImpl.MaterialDataImpl)">
            <summary>
            Get scene objects from the cache only if available scene objects with exact settings.
            </summary>
            <param name="pos"></param>
            <param name="rot"></param>
            <param name="scl"></param>
            <param name="material"></param>
            <returns></returns>
        </member>
        <member name="M:ProjectCommon.DynamicMeshManagerImpl.BlockImpl.SceneObjectCachingData.GetFromCacheNotExact(Engine.MathEx.Vec3@,Engine.MathEx.Quat@,Engine.MathEx.Vec3@,ProjectCommon.DynamicMeshManagerImpl.MaterialDataImpl,System.Boolean@,System.Boolean@)">
            <summary>
            Get scene objects from the cache.
            </summary>
            <param name="pos"></param>
            <param name="rot"></param>
            <param name="scl"></param>
            <param name="material"></param>
            <param name="exactTransform"></param>
            <param name="exactMaterial"></param>
            <returns></returns>
        </member>
        <member name="M:ProjectCommon.DynamicMeshManagerImpl.BlockImpl.SceneObjectCachingData.Add(ProjectCommon.DynamicMeshManagerImpl.SceneObject,System.Single)">
            <summary>
            Add scene object to the cache.
            </summary>
            <param name="sceneObject"></param>
            <param name="time"></param>
        </member>
        <member name="M:ProjectCommon.DynamicMeshManagerImpl.#ctor(System.Single)">
            <summary>
            
            </summary>
            <param name="maxLifeTimeNotUsedDataInCache">Specify Zero to disable caching.</param>
        </member>
        <member name="M:ProjectCommon.ExampleCustomInputDevice.Init">
            <summary>
            Initialize the device
            </summary>
            <returns>Returns true if initializng was successfully</returns>
        </member>
        <member name="M:ProjectCommon.ExampleCustomInputDevice.OnShutdown">
            <summary>
            Shutdown the device
            </summary>
        </member>
        <member name="M:ProjectCommon.ExampleCustomInputDevice.OnUpdateState">
            <summary>
            Update the device state. Calling at each tick.
            </summary>
        </member>
        <member name="M:ProjectCommon.ExampleCustomInputDevice.InitDevice">
            <summary>
            Initialize the device and register them in the InputDeviceManager
            </summary>
        </member>
        <member name="T:ProjectCommon.GameControlsManager">
            <summary>
            Represents the player control management.
            </summary>
        </member>
        <member name="P:ProjectCommon.GameControlsManager.GameControlItem.DefaultKeyboardMouseValues">
            <summary>
            <b>Don't modify</b>.
            </summary>
        </member>
        <member name="P:ProjectCommon.GameControlsManager.GameControlItem.DefaultJoystickValues">
            <summary>
            <b>Don't modify</b>.
            </summary>
        </member>
        <member name="M:ProjectCommon.GameControlsManager.Init">
            <summary>
            Initialization the class.
            </summary>
            <returns><b>true</b> if the object successfully initialized; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:ProjectCommon.GameControlsManager.Shutdown">
            <summary>
            Shutdown the class.
            </summary>
        </member>
        <member name="P:ProjectCommon.GameControlsManager.Instance">
            <summary>
            Gets an instance of the <see cref="T:ProjectCommon.GameControlsManager"/>.
            </summary>
        </member>
        <member name="M:ProjectCommon.GameControlsManager.DoKeyDown(Engine.KeyEvent)">
            <summary>
            Sends the notice on pressing a system key.
            </summary>
            <param name="e">Key event arguments.</param>
            <returns><b>true</b> if such system key is used; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:ProjectCommon.GameControlsManager.DoKeyUp(Engine.KeyEvent)">
            <summary>
            Sends the notice on releasing a system key.
            </summary>
            <param name="e">Key event arguments.</param>
            <returns><b>true</b> if such system key is used; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:ProjectCommon.GameControlsManager.DoMouseDown(Engine.EMouseButtons)">
            <summary>
            Sends the notice on pressing a mouse button.
            </summary>
            <param name="button">A value indicating which button was clicked.</param>
            <returns><b>true</b> if such system key is used; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:ProjectCommon.GameControlsManager.DoMouseUp(Engine.EMouseButtons)">
            <summary>
            Sends the notice on releasing a mouse button.
            </summary>
            <param name="button">A value indicating which button was clicked.</param>
            <returns><b>true</b> if such system key is used; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:ProjectCommon.GameControlsManager.DoMouseMoveRelative(Engine.MathEx.Vec2)">
            <summary>
            Sends the notice on cursor moved.
            </summary>
            <param name="mouseOffset">Current mouse position.</param>
        </member>
        <member name="P:ProjectCommon.GameControlsManager.Items">
            <summary>
            Gets the key information collection. <b>Don't modify</b>.
            </summary>
        </member>
        <member name="T:ProjectCommon.GameEngineInitialization">
            <summary>
            Class for execute actions after initialization of the engine.
            </summary>
            <remarks>
            It is class works in simulation application and editors (Resource Editor, Map Editor).
            </remarks>
        </member>
        <member name="T:ProjectCommon.RenderingLowLevelMethodsImpl">
            <summary>
            This class is intended only for advanced users. By means this class the developer can change behavior 
            of getting the list of visible objects in the camera, getting the list of objects for shadow generation.
            </summary>
        </member>
        <member name="T:ProjectCommon.GameMusic">
            <summary>
            Class for management of music in game.
            </summary>
        </member>
        <member name="P:ProjectCommon.GameMusic.MusicChannelGroup">
            <summary>
            Gets the music channel group.
            </summary>
        </member>
        <member name="M:ProjectCommon.GameMusic.MusicPlay(System.String,System.Boolean)">
            <summary>
            Play music.
            </summary>
            <param name="fileName">The file name.</param>
            <param name="loop">Looping flag.</param>
        </member>
        <member name="M:ProjectCommon.GameMusic.MusicStop">
            <summary>
            Stop music.
            </summary>
        </member>
        <member name="T:ProjectCommon.ShaderBaseMaterial">
            <summary>
            Base template for shader materials.
            </summary>
        </member>
    </members>
</doc>
